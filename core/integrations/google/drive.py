"""
Google Drive Integration for Zeno

Enhanced Google Docs and Drive management.
"""

from __future__ import annotations

from typing import Optional, Dict, Any

from .oauth import get_service

DOCS_SCOPES = [
    "https://www.googleapis.com/auth/documents",
    "https://www.googleapis.com/auth/drive.file",
]

DRIVE_SCOPES = ["https://www.googleapis.com/auth/drive.file"]


class DriveService:
    """Google Drive and Docs service with Zeno-specific enhancements."""
    
    def __init__(self):
        self.docs_service = get_service("docs", "v1", DOCS_SCOPES)
        self.drive_service = get_service("drive", "v3", DRIVE_SCOPES)
    
    def create_doc(
        self, 
        *, 
        title: str, 
        initial_text: Optional[str] = None
    ) -> Dict[str, Any]:
        """Create a Google Doc with optional initial text."""
        created = self.docs_service.documents().create(
            body={"title": title}
        ).execute()
        
        doc_id = created.get("documentId")

        if initial_text:
            self.docs_service.documents().batchUpdate(
                documentId=doc_id,
                body={
                    "requests": [
                        {
                            "insertText": {
                                "location": {"index": 1},
                                "text": initial_text,
                            }
                        }
                    ]
                },
            ).execute()

        # Get document link
        link = f"https://docs.google.com/document/d/{doc_id}/edit"
        return {
            "id": doc_id, 
            "title": title,
            "url": link,
            "link": link  # For backward compatibility
        }

    def append_to_doc(
        self, 
        *, 
        doc_id: str, 
        text: str
    ) -> Dict[str, Any]:
        """Append text to the end of a Google Doc."""
        self.docs_service.documents().batchUpdate(
            documentId=doc_id,
            body={
                "requests": [
                    {
                        "insertText": {
                            "endOfSegmentLocation": {"segmentId": ""},
                            "text": text,
                        }
                    }
                ]
            },
        ).execute()
        
        return {"id": doc_id}
    
    def get_doc_content(self, doc_id: str) -> Dict[str, Any]:
        """Get the content of a Google Doc."""
        doc = self.docs_service.documents().get(documentId=doc_id).execute()
        
        # Extract text content
        content = doc.get("body", {})
        text = ""
        
        for element in content.get("content", []):
            if "paragraph" in element:
                paragraph = element["paragraph"]
                for text_element in paragraph.get("elements", []):
                    text_run = text_element.get("textRun", {})
                    text += text_run.get("content", "")
        
        return {
            "id": doc_id,
            "title": doc.get("title", ""),
            "text": text,
            "url": f"https://docs.google.com/document/d/{doc_id}/edit"
        }
    
    def create_briefing_doc(
        self, 
        date: str, 
        briefing_content: str
    ) -> Dict[str, Any]:
        """Create a daily briefing document."""
        from datetime import datetime
        title = f"Zeno Daily Briefing - {date}"
        content = f"""ZENO DAILY BRIEFING
Date: {date}
Generated at: {datetime.now().strftime('%I:%M %p')}

{briefing_content}

---
Generated by Zeno AI Assistant
"""
        
        return self.create_doc(title=title, initial_text=content)
    
    def create_task_summary_doc(
        self,
        date: str,
        tasks: list,
        priority_tasks: list
    ) -> Dict[str, Any]:
        """Create a daily task summary document."""
        from datetime import datetime
        title = f"Zeno Daily Tasks - {date}"
        
        content = f"""ZENO DAILY TASK SUMMARY
Date: {date}
Generated at: {datetime.now().strftime('%I:%M %p')}

PRIORITY TASKS:
"""
        
        if priority_tasks:
            for task in priority_tasks:
                priority_label = "🔴 URGENT" if task.get("priority") == 1 else "🟡 HIGH" if task.get("priority") == 2 else "🔵 MEDIUM"
                content += f"• {priority_label}: {task['title']}\n"
                if task.get("description"):
                    content += f"  Description: {task['description']}\n"
                if task.get("due_date"):
                    content += f"  Due: {task['due_date']}\n"
                content += "\n"
        else:
            content += "No high-priority tasks\n\n"
        
        content += "ALL PENDING TASKS:\n"
        if tasks:
            for task in tasks:
                status = "✅" if task.get("completed") else "⏳"
                content += f"{status} {task['title']}"
                if task.get("due_date"):
                    content += f" (Due: {task['due_date']})"
                content += "\n"
        else:
            content += "No pending tasks\n"
        
        content += """
---
Generated by Zeno AI Assistant
"""
        
        return self.create_doc(title=title, initial_text=content)
    
    def create_call_summary_doc(
        self,
        participant_id: str,
        date: str,
        summary: str,
        transcript: str
    ) -> Dict[str, Any]:
        """Create a call summary document."""
        title = f"Zeno Call Summary - {participant_id} - {date}"
        content = f"""ZENO CALL SUMMARY
Date: {date}
Participant: {participant_id}

SUMMARY:
{summary}

FULL TRANSCRIPT:
{transcript}

---
Generated by Zeno AI Assistant
"""
        
        return self.create_doc(title=title, initial_text=content)
